diff --git a/src/builtins/cmd_export.c b/src/builtins/cmd_export.c
index ad087e1..b7b7654 100644
--- a/src/builtins/cmd_export.c
+++ b/src/builtins/cmd_export.c
@@ -1,9 +1,7 @@
 #include "minishell.h"
 
-
 static bool	has_valid_args(char **input);
 
-//FIXME: Export without arguments
 int	cmd_export(t_smash *smash, char **input)
 {
 	int		i;
@@ -18,15 +16,14 @@ int	cmd_export(t_smash *smash, char **input)
 		if (entry && is_valid_key(entry[0]))
 		{
 			if (!get_value(smash->envp, entry[0]))
-			{
-				if (!new_entry(&smash->envp, entry[0], entry[1]))
+				if (!new_entry(&(smash->envp), entry[0], entry[1]))
 					return (ft_free_double_pointer((void **)entry), ft_putstr_fd("Malloc error\n", 2), -1);
-				return (free(entry), 0);
-			}
 			if (!update_envp(&(smash->envp), entry[0], entry[1]))
 				return (ft_free_double_pointer((void **)entry), ft_putstr_fd("Malloc error\n", 2), -1);
-			ft_free_double_pointer((void **)entry);
+			free(entry); //FIXME: value weird char "?"
 		}
+		else
+			ft_printf_fd(2, "smash: export: '%s': not a valid identifier\n", input[i]);
 		i++;
 	}
 	return (0);
diff --git a/src/env/env_list.c b/src/env/env_list.c
index 4e5dd68..fb9b43f 100644
--- a/src/env/env_list.c
+++ b/src/env/env_list.c
@@ -15,6 +15,7 @@ bool	new_entry(t_envp **envp, char *key, char *value)
 {
 	t_envp	*node;
 
+
 	node = new_node(key, value);
 	if (!node)
 		return (false);
diff --git a/src/env/env_utils.c b/src/env/env_utils.c
index 36779a5..d3d6438 100644
--- a/src/env/env_utils.c
+++ b/src/env/env_utils.c
@@ -62,7 +62,7 @@ int	envsize(t_envp *lst)
 	return (count);
 }
 
-bool	is_valid_key(char *key) //TODO: try to use valid_char
+bool	is_valid_key(char *key)
 {
 	int	i;
 
diff --git a/src/minishell.c b/src/minishell.c
index 4337aa3..22c0b31 100644
--- a/src/minishell.c
+++ b/src/minishell.c
@@ -42,4 +42,3 @@ static t_smash	init(int argc, char **argv, char **envp)
 	import_history(&smash);
 	return (smash);
 }
-//TODO: protect builtins mallocs
\ No newline at end of file
